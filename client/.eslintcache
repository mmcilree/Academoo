[{"/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/index.js":"1","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/App.js":"2","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/serviceWorker.js":"3","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/HostContext.js":"4","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/Welcome.jsx":"5","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/PageNotFound.jsx":"6","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/PrivateRoute.jsx":"7","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/UserSettings.jsx":"8","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/Login.jsx":"9","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/CommentsViewer.jsx":"10","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/CommunityCreator.jsx":"11","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/PostCreator.jsx":"12","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/HeaderBar.jsx":"13","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/PostsViewer.jsx":"14","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/UserProfile.jsx":"15","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/SignUp.jsx":"16","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/test_post_json.js":"17","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/Post.jsx":"18","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/Sidebar.jsx":"19","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/CommentCreator.jsx":"20","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/auth/index.js":"21","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/util/timeSince.js":"22","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/CommunityExplorer.jsx":"23","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/LoggedOutRoute.jsx":"24","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/CommunityFeed.jsx":"25","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/CommunityList.jsx":"26","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/AccessForbidden.jsx":"27","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/CommunityManager.jsx":"28","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/UserRolesTable.jsx":"29"},{"size":588,"mtime":1605016424619,"results":"30","hashOfConfig":"31"},{"size":3170,"mtime":1612455053160,"results":"32","hashOfConfig":"31"},{"size":5086,"mtime":1605016424619,"results":"33","hashOfConfig":"31"},{"size":118,"mtime":1609676945892,"results":"34","hashOfConfig":"31"},{"size":612,"mtime":1612454974148,"results":"35","hashOfConfig":"31"},{"size":499,"mtime":1605016424619,"results":"36","hashOfConfig":"31"},{"size":348,"mtime":1609676945896,"results":"37","hashOfConfig":"31"},{"size":6624,"mtime":1612455053152,"results":"38","hashOfConfig":"31"},{"size":2875,"mtime":1611935853196,"results":"39","hashOfConfig":"31"},{"size":3986,"mtime":1612454974148,"results":"40","hashOfConfig":"31"},{"size":6541,"mtime":1612454974148,"results":"41","hashOfConfig":"31"},{"size":7726,"mtime":1612454974148,"results":"42","hashOfConfig":"31"},{"size":3884,"mtime":1612455053152,"results":"43","hashOfConfig":"31"},{"size":5543,"mtime":1612454974148,"results":"44","hashOfConfig":"31"},{"size":3102,"mtime":1612455053152,"results":"45","hashOfConfig":"31"},{"size":5247,"mtime":1611935853200,"results":"46","hashOfConfig":"31"},{"size":908,"mtime":1605016424619,"results":"47","hashOfConfig":"31"},{"size":2312,"mtime":1612455119627,"results":"48","hashOfConfig":"31"},{"size":2375,"mtime":1609676945896,"results":"49","hashOfConfig":"31"},{"size":3119,"mtime":1612454974148,"results":"50","hashOfConfig":"31"},{"size":1408,"mtime":1611935853196,"results":"51","hashOfConfig":"31"},{"size":1026,"mtime":1609676945896,"results":"52","hashOfConfig":"31"},{"size":1326,"mtime":1611935853196,"results":"53","hashOfConfig":"31"},{"size":344,"mtime":1611935853196,"results":"54","hashOfConfig":"31"},{"size":5145,"mtime":1611935853196,"results":"55","hashOfConfig":"31"},{"size":2536,"mtime":1612454974148,"results":"56","hashOfConfig":"31"},{"size":528,"mtime":1612454974148,"results":"57","hashOfConfig":"31"},{"size":13332,"mtime":1612454974148,"results":"58","hashOfConfig":"31"},{"size":2192,"mtime":1612454974148,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"5mzrh0",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"62"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"62"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"62"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"62"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"62"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"62"},"/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/index.js",[],["130","131"],"/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/App.js",[],"/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/serviceWorker.js",[],"/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/HostContext.js",[],"/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/Welcome.jsx",[],"/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/PageNotFound.jsx",[],"/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/PrivateRoute.jsx",[],"/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/UserSettings.jsx",["132"],"import React, { Component } from \"react\";\nimport { Card, Form, Button, Alert } from \"react-bootstrap\";\nimport { authFetch } from '../auth';\nimport { withRouter } from 'react-router-dom';\n\nclass UserSettings extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      oldPassword: \"\",\n      newPassword: \"\",\n      errors: [],\n      changed: false,\n      username: \"\",\n      email: \"\",\n      bio: \"\",\n      host: \"\",\n      privateAccount: true,\n      privUpdated: false,\n      isLoading: false\n\n    }\n  }\n\n  componentDidMount() {\n    this.fetchUserDetails();\n  }\n\n  fetchUserDetails() {\n    authFetch(\"/api/get-user\").then(response => response.json())\n      .then(data =>\n        this.setState({\n          username: data.id,\n          email: data.email,\n          bio: data.bio,\n          privateAccount: data.private,\n          checked: data.private,\n          host: data.host,\n          isLoading: false\n        })\n      )\n\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleCheckboxChange(event) {\n    this.setState({ checked: event.target.checked, privUpdated: false });\n  }\n\n  validateForm() {\n    const errors = [];\n    if (this.state.oldPassword.length === 0 || this.state.newPassword.length === 0) {\n      errors.push(\"Required fields have been left blank.\")\n    }\n\n    if (!this.state.newPassword.match(/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/)) {\n      errors.push(\n        <p>Password should have:\n          <ul>\n            <li> Minimum eight characters</li>\n            <li> At least one number</li>\n          </ul>\n        </p>);\n    }\n\n    return errors;\n  }\n\n  handleSubmitPass(event) {\n    event.preventDefault();\n\n    const errors = this.validateForm();\n    if (errors.length > 0) {\n      this.setState({ errors });\n      return;\n    }\n\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: {\n        old_password: this.state.oldPassword,\n        new_password: this.state.newPassword,\n      }\n    };\n    requestOptions.body = JSON.stringify(requestOptions.body);\n\n    authFetch('/api/change-password', requestOptions).then(r => r.status).then(statusCode => {\n      if (statusCode != 200) {\n        this.setState({ changed: false, errors: [\"Incorrect Password!\"] })\n      } else {\n        this.setState({ changed: true, errors: [] });\n      }\n    });\n    this.setState(\n      { oldPassword: \"\", newPassword: \"\" }\n    );\n    this.props.history.push('/user-settings/');\n  }\n\n  async handleSubmitBio(event) {\n    event.preventDefault();\n\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: {\n        bio: this.state.new_bio\n      }\n    }\n    requestOptions.body = JSON.stringify(requestOptions.body);\n\n\n    await authFetch('/api/update-bio', requestOptions);\n    this.setState({ new_bio: \"\" })\n    this.fetchUserDetails();\n    this.props.history.push(\"/user-profile/\" + this.state.username);\n  }\n\n  async handleSubmitPrivacy(event) {\n    event.preventDefault();\n\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: {\n        private: (this.state.checked ? \"private\" : \"public\")\n      }\n    }\n    requestOptions.body = JSON.stringify(requestOptions.body);\n\n\n    await authFetch('/api/update-privacy', requestOptions)\n      .then(response => {\n        this.setState({ privUpdated: true });\n        this.fetchUserDetails();\n      });\n\n  }\n\n  render() {\n    const { errors, changed } = this.state;\n    return (\n      <Card className=\"mt-4\">\n        <Card.Body>\n          <h3>Settings</h3>\n          <Card className=\"mt-4\">\n            <Card.Body>\n\n              {errors.map(error => (\n                <Alert variant='warning' key={error}>{error}</Alert>\n              ))}\n              {changed && <Alert variant='success'>Password changed successfully!</Alert>}\n\n              <Form onSubmit={this.handleSubmitPass.bind(this)}>\n                <Form.Group>\n                  <Form.Label>Change your password:</Form.Label>\n                  <Form.Text>Current Password</Form.Text>\n                  <Form.Control type=\"password\" name=\"oldPassword\" onChange={this.handleChange.bind(this)} value={this.state.oldPassword} />\n                  <Form.Text>New Password</Form.Text>\n                  <Form.Control type=\"password\" name=\"newPassword\" onChange={this.handleChange.bind(this)} value={this.state.newPassword} />\n                </Form.Group>\n                <Button type=\"submit\" variant=\"secondary\">Change Password</Button>\n              </Form>\n            </Card.Body>\n          </Card>\n          <Card className=\"mt-4\">\n            <Card.Body>\n              <Form onSubmit={this.handleSubmitBio.bind(this)}>\n                <Form.Group controlId=\"profileBio\">\n                  <Form.Label>Update Your Bio:</Form.Label>\n                  <Form.Control type=\"input\"\n                    placeholder=\"Tell us more about yourself\"\n                    name=\"new_bio\"\n                    onChange={this.handleChange.bind(this)}\n                    value={this.state.new_bio} />\n                </Form.Group>\n                <Button variant=\"secondary\" type=\"submit\">\n                  Update Bio\n                  </Button>\n              </Form>\n            </Card.Body>\n          </Card>\n          <Card className=\"mt-4\">\n            <Card.Body>\n              <Form onSubmit={this.handleSubmitPrivacy.bind(this)}>\n                <Form.Group controlId=\"privacy\">\n                  <Form.Label>Privacy Settings</Form.Label>\n                  {this.state.privUpdated && <Alert variant=\"primary\">Privacy Settings Updated</Alert>}\n                  <Form.Text>With a private account, other users can see your username but cannot see any of your details.</Form.Text>\n                  <Form.Text>Your account is currently <b>{this.state.privateAccount ? \"private.\" : \"public\"}</b></Form.Text>\n                  <br />\n                  <Form.Check\n                    type=\"switch\"\n                    id=\"custom-switch\"\n                    label=\"Private account\"\n                    checked={this.state.checked}\n                    onChange={this.handleCheckboxChange.bind(this)}\n                  />\n                </Form.Group>\n                <Button variant=\"secondary\" type=\"submit\">Save</Button>\n              </Form>\n            </Card.Body>\n          </Card>\n        </Card.Body>\n      </Card >\n    );\n  }\n}\n\nexport default withRouter(UserSettings);\n","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/Login.jsx",[],"/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/CommentsViewer.jsx",[],"/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/CommunityCreator.jsx",[],"/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/PostCreator.jsx",[],"/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/HeaderBar.jsx",["133","134","135","136","137","138"],"import React, { Component } from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport Image from \"react-bootstrap/Image\";\nimport { logout, useAuth } from \"../auth\";\nimport defaultProfile from \"../images/default_profile.png\";\nimport logo from \"../images/logo.svg\";\n// import logo from \"../images/logo.png\";\nimport { HostContext } from './HostContext';\nimport { useState, useEffect, useContext } from \"react\";\nimport { authFetch } from '../auth';\n\n\nimport {\n  PlusCircle,\n  PersonCircle,\n  Gear,\n  BoxArrowRight,\n} from \"react-bootstrap-icons\";\n\nimport { Link } from \"react-router-dom\";\nvar md5 = require(\"md5\");\n\nfunction HeaderBar() {\n\n  const [logged] = useAuth();\n  const [instances, setInstances] = useState(null);\n  const [email, setEmail] = useState(null);\n  const [username, setUsername] = useState(null);\n\n  const context = useContext(HostContext);\n\n  useEffect(() => {\n    async function fetchData() {\n      const res = await fetch(\"/api/get-instances\");\n      res.json().then(res => setInstances([\"local\", ...res]));\n\n      logged && authFetch(\"/api/get-user\").then(response => response.json())\n        .then(data => {\n          setEmail(md5(data.email))\n          setUsername(data.id)\n        }\n        )\n    }\n\n    fetchData();\n  }, []);\n\n\n  return (\n    <Navbar bg=\"primary\" variant=\"dark\" expand=\"lg\" {...(!logged ? { className: 'justify-content-center' } : {})}>\n      <Navbar.Brand as={Link} to=\"/\">\n        <img\n          alt=\"\"\n          src={logo}\n          width=\"70\"\n          height=\"70\"\n          className=\"d-inline-block align-center\"\n        />{\" \"}\n        Academoo\n      </Navbar.Brand>\n\n      {logged && (\n        <React.Fragment>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Nav.Link as={Link} to=\"/moosfeed\">\n                Moosfeed\n              </Nav.Link>\n              <Nav.Link as={Link} to=\"/explore\">\n                Commoonities\n              </Nav.Link>\n              <Nav.Link as={Link} to=\"/create-post\">\n                <PlusCircle className=\"mb-1\" />\n                <span> New Moo</span>\n              </Nav.Link>\n              <Nav.Link as={Link} to=\"/create-community\">\n                <PlusCircle className=\"mb-1\" />\n                <span> New Commoonity</span>\n              </Nav.Link>\n            </Nav>\n\n            <Nav>\n\n              <DropdownButton\n                // as={Link}\n                // to=\"/user-profile\"\n                variant=\"outline-light\"\n                title={\n                  <span>\n                    <Image\n                      className=\"mr-3\"\n                      src={\"https://en.gravatar.com/avatar/\" + email}\n                      roundedCircle\n                      width=\"25\"\n                      height=\"25\"\n                    ></Image>\n                    Yoo\n                  </span>\n                }\n                id=\"collasible-nav-dropdown\"\n                alignRight\n                className=\"p0\"\n              >\n                <NavDropdown.Item as={Link} to={\"/user-profile/\" + username}>\n                  <PersonCircle /> Profile\n                </NavDropdown.Item>\n                <NavDropdown.Item as={Link} to=\"/user-settings\">\n                  <Gear /> Settings\n                </NavDropdown.Item>\n\n                <NavDropdown.Divider />\n                <NavDropdown.Item onClick={logout}>\n                  <BoxArrowRight /> Log Out{\" \"}\n                </NavDropdown.Item>\n              </DropdownButton>\n            </Nav>\n          </Navbar.Collapse>\n        </React.Fragment>\n      )}\n\n    </Navbar>\n  );\n}\n\nexport default HeaderBar;\n","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/PostsViewer.jsx",["139","140","141"],"import React, { Component } from \"react\";\nimport Post from \"./Post\";\nimport { Card, Col, Form, FormControl, Button, Alert, OverlayTrigger, Popover } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { PlusCircle } from \"react-bootstrap-icons\";\nimport { authFetch } from '../auth';\n\nclass PostsViewer extends Component {\n  state = {\n    isLoading: true,\n    posts: [],\n    currentCommunity: this.props.match.params.id,\n    error: null,\n    host: this.props.match.params.instance ? this.props.match.params.instance : \"local\",\n    newPostText: \"\",\n    isAdmin: false,\n    communityData: null\n  }\n\n  componentDidMount() {\n    this.fetchPosts();\n    this.fetchUserDetails();\n  }\n\n  fetchUserDetails() {\n    authFetch(\"/api/get-user\").then(response => response.json())\n      .then(data =>\n        this.setState({\n          isAdmin: data.adminOf.includes(this.state.currentCommunity)\n        })\n      )\n\n  }\n\n  async fetchPosts() {\n    await fetch('/api/posts?community=' + this.state.currentCommunity + (this.state.host !== \"local\" ? \"&external=\" + this.state.host : \"\"))\n      .then(response => response.json())\n      .then(data =>\n        this.setState({\n          posts: data,\n          host: this.state.host\n        })\n      )\n      .catch(error => this.setState({ error, isLoading: false }));\n    this.fetchCommunityDetails();\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  fetchCommunityDetails() {\n    fetch('/api/communities/' + this.state.currentCommunity + (this.state.host !== \"local\" ? \"?external=\" + this.state.host : \"\"))\n      .then(response => response.json())\n      .then(data =>\n        this.setState({\n          communityData: data,\n          isLoading: false,\n        })\n      )\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n  }\n\n  render() {\n    const { isLoading, posts, error, currentCommunity, newPostText, host, communityData, isAdmin } = this.state;\n    const popover = (\n      <Popover id=\"popover-basic\">\n        <Popover.Title as=\"h3\">Community description</Popover.Title>\n        <Popover.Content>\n          {!isLoading && communityData.description}\n        </Popover.Content>\n      </Popover>\n    );\n    console.log(this.state);\n    return currentCommunity && (\n      <Card className=\"mt-4 mb-10\">\n        <Card.Header className=\"pt-4\">\n          <div className=\"d-flex justify-content-between\">\n            {!isLoading ?\n              <Card.Title className=\"d-flex justify-content-right\">\n                <OverlayTrigger trigger={['hover', 'focus']} placement=\"right\" overlay={popover}>\n                  <Link to=\"#\" className=\"px-0 py-0\" variant=\"none\" style={{ color: \"black\", fontSize: \"36px\" }}>{communityData.title}\n                  </Link></OverlayTrigger>\n              </Card.Title>\n              : <h2> Loading... </h2>}\n            {this.state.host === \"local\" && isAdmin && <Link to={\"/communities/\" + currentCommunity + \"/manage\"}>\n              <Button variant=\"primary\">Manage Community</Button>\n            </Link>}\n          </div>\n\n          <Card.Subtitle className=\"text-muted\"><h6>{host + \"/\" + currentCommunity}</h6></Card.Subtitle>\n        </Card.Header>\n        <Card.Body>\n          {this.state.isAdmin && <Alert variant=\"primary\">You are an admin!</Alert>}\n          <Form onSubmit={this.handleSubmit.bind(this)}>\n            <Form.Row>\n              <Form.Group as={Col} className=\"d-none d-sm-flex\" sm={6} md={7} lg={9}>\n                <FormControl\n                  type=\"text\"\n                  placeholder=\"Create your own post: \"\n                  name=\"newPostText\"\n                  className=\"mr-2\"\n                  onChange={this.handleChange.bind(this)} />\n\n              </Form.Group>\n              <Form.Group as={Col} xs={12} sm={6} md={5} lg={3}>\n                <Link to={\n                  {\n                    pathname: \"/create-post\",\n                    state: {\n                      body: newPostText,\n                      community: currentCommunity,\n                      host: host\n                    }\n                  }\n                }>\n                  <Button variant=\"outline-secondary\" className=\"w-100\" > <PlusCircle className=\"mb-1\" /> New Moo</Button>\n                </Link>\n              </Form.Group>\n            </Form.Row>\n          </Form>\n          {error ? <Alert variant=\"danger\">Error fetching posts: {error.message}</Alert> : null}\n          {!isLoading ? (\n            posts.map(data => {\n              const { community, parentPost, id } = data;\n              return (\n                (community === currentCommunity & parentPost === null) ? (\n                  <Card key={id} className=\"mt-4\">\n                    <Card.Body >\n                      <Post postData={data} postType=\"preview\" />\n                      <Link\n                        to={this.state.host === \"local\" ? `/comments/${id}` : '/comments/' + this.state.host + `/${id}`}\n                        className=\"btn btn-primary stretched-link\"\n                      >\n                        View Comments ({data.children.length})\n                          </Link>\n                    </Card.Body>\n                  </Card>\n                ) : null);\n            })\n          ) : (\n              <h3>Loading Posts...</h3>\n            )}\n          {!isLoading && posts.length === 0 ? <h4>There's no posts yet :-(</h4> : null}\n\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport default PostsViewer;\n","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/UserProfile.jsx",["142","143","144","145","146"],"import React, { Component } from \"react\";\nimport { Card, Media } from \"react-bootstrap\";\nimport defaultProfile from \"../images/default_profile.png\";\nimport { authFetch } from '../auth';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nvar md5 = require(\"md5\");\n\nclass UserProfile extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentUser: \"\",\n      username: this.props.match.params.id,\n      email: null,\n      bio: \"\",\n      host: this.props.match.params.instance ? this.props.match.params.instance : \"local\",\n      isLoading: true\n    };\n  }\n  // handleChange(event) {\n  //   const target = event.target;\n  //   const value = target.value;\n  //   const name = target.name;\n  //   this.setState({\n  //     [name]: value\n  //   });\n\n  // }\n\n  fetchCurrentUser() {\n    authFetch(\"/api/get-user\").then(response => response.json())\n      .then(data => {\n        if (data.id === this.state.username) {\n          this.setState({\n            currentUser: data.id,\n            email: data.email,\n            bio: data.bio,\n            isLoading: false\n          })\n        } else {\n          this.setState({\n            currentUser: data.id,\n          })\n          this.fetchUserDetails();\n        }\n      }\n\n      )\n  }\n\n  componentDidMount() {\n    this.fetchCurrentUser();\n  }\n\n\n  componentDidUpdate(prevProps) {\n    if (this.props.match.params.id !== prevProps.match.params.id) {\n      this.state.username = this.props.match.params.id;\n      this.state.host = this.props.match.params.instance ? this.props.match.params.instance : \"local\";\n      this.fetchCurrentUser();\n    }\n  }\n\n  fetchUserDetails() {\n    fetch('/api/users/' + this.state.username + (this.state.host !== \"local\" ? \"&external=\" + this.state.host : \"\"))\n      .then(response => response.json())\n      .then(data =>\n        this.setState({\n          isLoading: false,\n          email: data.email,\n          // host: data.host,\n          bio: data.bio,\n          error: null,\n        })\n      )\n      .catch(error => this.setState({ error, isLoading: false }));\n  }\n\n  render() {\n    let emailHash = \"\"\n    if (this.state.email) {\n      emailHash = !this.state.isLoading && md5(this.state.email);\n    }\n\n    const { username, email, bio } = this.state;\n    return username && (\n      <Card className=\"mt-4\">\n        <Card.Body>\n\n          <Media>\n            <img\n              width={150}\n              height={150}\n              className=\"mr-5 mb-3 rounded-circle border border-primary\"\n              src={email ? \"https://en.gravatar.com/avatar/\" + emailHash : defaultProfile}\n              alt=\"Profile image placeholder\"\n            />\n            {!this.state.isLoading ? (\n              <Media.Body className=\"mr-3\">\n                <h3>Username: {username}</h3>\n                <h4 className=\"text-muted\"> Email: {email} </h4>\n                <p>Bio: {bio ? bio : \"No bio has been set yet!\"} </p>\n              </Media.Body>) : <h3>Loading Profile...</h3>}\n          </Media>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport default UserProfile;\n","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/SignUp.jsx",["147","148","149","150"],"import React from \"react\";\nimport { Button, FormGroup, FormControl, Form, Card, Alert } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { Route } from 'react-router-dom';\n\nclass SignUp extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      username: \"\",\n      password: \"\",\n      passwordConfirm: \"\",\n      errors: [],\n    };\n  }\n  validateForm() {\n    const errors = [];\n\n    if(this.state.username.length === 0 || \n      this.state.email.length === 0 || \n      this.state.password.length === 0 ||\n      this.state.passwordConfirm.length === 0) {\n        errors.push(\"Required fields have been left blank.\");\n        return errors;\n      }\n    if (this.state.username.length < 3) {\n      errors.push(\"Username must be at least 3 characters.\");\n    }\n\n    if (this.state.email.split(\"\").filter(x => x === \"@\").length !== 1) {\n      errors.push(\"Email should contain the @ symbol.\");\n    }\n\n    if (this.state.password !== this.state.passwordConfirm) {\n      errors.push(\"Passwords do not match.\");\n    }\n    if (!this.state.password.match(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*\\-£])(?=.{8,})/)) {\n      errors.push(\n        <div>\n        <p>Password should have:</p>\n          <ul> \n            <li> Minimum eight characters</li> \n            <li> At least one number.</li>\n            <li> At least one special character.</li>\n            <li> At least one capital letter.</li>\n          </ul></div>);\n    }\n\n    return errors;\n  }\n  handlePasswordChange(event) {\n    this.handleChange(event);\n  }\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    const errors = this.validateForm();\n    if(errors.length > 0) {\n      this.setState({errors});\n      return;\n    }\n    const opt = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(\n        {\n          email: this.state.email,\n          username: this.state.username,\n          password: this.state.password\n        }\n      )}\n\n    // To improve once we have a better way to check unique usernames.\n    fetch('/api/register', opt).then( ((response) => {\n      if (!response.ok) {\n        throw new Error();\n      }\n      return response;\n      }))\n    .then(((response) => {\n      this.props.history.push('/login')\n      }))\n    .catch((error) => {\n      this.setState({isNonUnique: true})\n      })\n  }\n\n  render() {\n    const {errors} = this.state;\n    return (\n      <Card className=\"mt-4 mb-4\">\n        <Card.Body className=\"mx-auto\" onSubmit={this.handleSubmit.bind(this)}>\n          <div>\n            <p>Sign up for your Academoo account here. </p>\n            <Form autoComplete=\"off\">\n\n              <FormGroup controlId=\"email\" bssize=\"large\">\n                <Form.Label>Email</Form.Label>\n                <FormControl\n                  autoFocus\n                  onChange={this.handleChange.bind(this)}\n                  type=\"email\"\n                  value={this.state.email}\n                  name=\"email\"\n                  autoComplete=\"new-password\"\n                  required\n                />\n              </FormGroup>\n              <FormGroup controlId=\"username\" bssize=\"large\">\n                <Form.Label>Create a username</Form.Label>\n                <FormControl\n                  onChange={this.handleChange.bind(this)}\n                  type=\"text\"\n                  value={this.state.username}\n                  name=\"username\"\n                  autoComplete=\"new-password\"\n                />\n              </FormGroup>\n              {this.state.isNonUnique ? (<Alert variant='warning'> Username or email already registered.</Alert>) : null}\n              <FormGroup controlId=\"password\" bssize=\"large\">\n                <Form.Label>Password</Form.Label>\n                <FormControl\n                  onChange={this.handlePasswordChange.bind(this)}\n                  value={this.state.password}\n                  name=\"password\"\n                  type=\"password\"\n                  autoComplete=\"new-password\"\n                />\n              </FormGroup>\n\n              <FormGroup controlId=\"confirmPassword\" bssize=\"large\">\n                <Form.Label>Confirm Password</Form.Label>\n                <FormControl\n                  onChange={this.handleChange.bind(this)}\n                  value={this.state.passwordConfirm}\n                  name=\"passwordConfirm\"\n                  type=\"password\"\n                  autoComplete=\"new-password\"\n                />\n              </FormGroup>\n              {errors.map(error => (\n                <Alert variant='warning' key={error}>{error}</Alert>\n              ))}\n            \n                <Button\n                  type='submit'\n                  onClick={this.handleSubmit.bind(this)}\n                >\n                  Register now\n                </Button>\n              <Link to=\"/login\" className=\"btn btn-link\">\n                Already signed up?\n              </Link>\n\n            </Form>\n          </div>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport default SignUp;\n","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/test_post_json.js",[],"/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/Post.jsx",["151","152","153","154"],"/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/Sidebar.jsx",[],"/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/CommentCreator.jsx",[],"/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/auth/index.js",[],"/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/util/timeSince.js",["155"],"export default function timeSince(timestamp) {\n    let date = new Date(timestamp*1000);\n    \n    let seconds = Math.floor((new Date() - date) / 1000);\n\n    let interval = seconds / 31536000;\n    let count = Math.floor(interval);\n\n    if (interval >= 1) {\n      return count + \" year\" + ((count > 1) ? \"s\" : \"\");\n    }\n\n    interval = seconds / 2592000;\n    count = Math.floor(interval);\n\n    if (interval > 1) {\n        return count + \" month\" + ((count > 1) ? \"s\" : \"\");\n    }\n\n    interval = seconds / 86400;\n    count = Math.floor(interval);\n\n    if (interval > 1) {\n      return count + \" day\" + ((count > 1) ? \"s\" : \"\");\n    }\n\n    interval = seconds / 3600;\n    count = Math.floor(interval);\n\n    if (interval > 1) {\n        return count + \" hour\" + ((count > 1) ? \"s\" : \"\");\n    }\n\n    interval = seconds / 60;\n    count = Math.floor(interval);\n\n    if (interval > 1) {\n      return count + \" minute\" + ((count > 1) ? \"s\" : \"\");\n    }\n    \n    return seconds + \" second\" + ((seconds > 1 || seconds == 0 ) ? \"s\" : \"\");\n}","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/CommunityExplorer.jsx",["156"],"import React from \"react\";\nimport {Card, Alert} from \"react-bootstrap\";\nimport CommunityList from \"./CommunityList\";\nimport { Link } from \"react-router-dom\";\n\nclass CommunityExplorer extends React.Component {\n  state = {\n    isLoading: true,\n    instances: [],\n    currentCommunity: null,\n    error: null,\n  }\n\n  componentDidMount() {\n    this.fetchInstances();\n  }\n\n  fetchInstances() {\n    fetch(\"/api/get-instances\")\n      .then(response => response.json())\n      .then(data =>\n        this.setState({\n          instances: data,\n          isLoading: false,\n        })\n      )\n      .catch(error => this.setState({ error, isLoading: false }));\n  }\n\n  \n  render() {\n    const { isLoading, instances, error } = this.state;\n    return (\n      <Card className=\"mt-4\">\n        <Card.Body>\n          <h1>Explore Commoonities</h1>\n          <p>See what communities are available on the federated network!</p>\n          {error ? <Alert variant=\"danger\">Error fetching instances: {error.message}</Alert> : null}\n          <CommunityList instance=\"local\"/>\n          {!isLoading ?\n            instances.map(name => {\n              return <CommunityList instance={name}> </CommunityList>\n            })\n        : <h3>Loading External Instances...</h3>}\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport default CommunityExplorer;","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/LoggedOutRoute.jsx",[],"/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/CommunityFeed.jsx",["157","158","159","160","161","162","163","164","165","166","167","168","169","170"],"import React, { Component, useContext } from \"react\";\nimport Post from \"./Post\";\nimport Sidebar from \"./Sidebar\";\nimport { Card, Container, Row, Col, Form, FormControl, Button, Alert } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { HostContext } from \"./HostContext\";\nimport { PlusCircle } from \"react-bootstrap-icons\";\n\nclass CommunityFeed extends Component {\n  state = {\n    isLoading: true,\n    posts: [],\n    currentCommunity: null,\n    error: null,\n    host: null,\n    newPostText: \"\"\n  }\n\n  static contextType = HostContext;\n\n  componentDidMount() {\n    this.fetchCommunity();\n  }\n\n  componentDidUpdate() {\n    if (this.context.host !== this.state.host) {\n      this.fetchCommunity();\n    } else if (this.state.isLoading) {\n      this.fetchPosts();\n    }\n  }\n\n  async fetchCommunity() {\n    await fetch('/api/communities' + (this.context.host !== null ? \"?external=\" + this.context.host : \"\"))\n      .then(response => response.json())\n      .then(data =>\n        this.setState({\n          currentCommunity: data.length > 0 ? data[0] : \"?\"\n        })\n      )\n\n    this.fetchPosts();\n  }\n\n  fetchPosts() {\n    fetch('/api/posts?community=' + this.state.currentCommunity + (this.context.host !== null ? \"&external=\" + this.context.host : \"\"))\n      .then(response => response.json())\n      .then(data =>\n        this.setState({\n          posts: data,\n          isLoading: false,\n          host: this.context.host\n        })\n      )\n      .catch(error => this.setState({ error, isLoading: false }));\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n  }\n\n  render() {\n    const { isLoading, posts, error, currentCommunity, newPostText } = this.state;\n\n    return currentCommunity && (\n      <Container>\n        <Card className=\"mt-4\">\n          <Card.Body>\n            <h3>You haven't yet subscribed to any communities!</h3>\n            <p>See what's available:</p>\n            <Link to=\"/explore\" className=\"btn btn-secondary\">\n            Explore Communities\n          </Link>\n          </Card.Body>\n\n        </Card>\n        {/*\n        <Row>\n          <Col xs={8}>\n            <Card className=\"mt-4\">\n              <Card.Header className=\"pt-4\">\n                <h2>{currentCommunity}</h2>\n              </Card.Header>\n              <Card.Body>\n                <Form onSubmit={this.handleSubmit.bind(this)}>\n                  <Form.Row>\n                    <Form.Group as={Col} className=\"d-none d-sm-flex\" sm={6} md={7} lg={9}>\n                      <FormControl \n                        type=\"text\" \n                        placeholder=\"Create your own post: \" \n                        name=\"newPostText\" \n                        className=\"mr-2\" \n                        onChange={this.handleChange.bind(this)} />\n\n                    </Form.Group>\n                    <Form.Group as={Col} xs={12} sm={6} md={5} lg={3}>\n                      <Link to={\n                        {\n                          pathname: \"/create-post\",\n                          state: {\n                            body: newPostText,\n                            community: currentCommunity\n                          }\n                        }\n                      }>\n                        <Button variant=\"outline-secondary\" className=\"w-100\" > <PlusCircle className=\"mb-1\" /> New Moo</Button>\n                      </Link>\n                    </Form.Group>\n                  </Form.Row>\n                </Form>\n                {error ? <Alert variant=\"danger\">Error fetching posts: {error.message}</Alert> : null}\n                {!isLoading ? (\n                  posts.map(data => {\n                    const { parent, id } = data;\n                    return (\n                      parent === currentCommunity ? (\n                        <Card key={id} className=\"mt-4\">\n                          <Card.Body>\n                            <Post postData={data} />\n                            <Link\n                              to={this.state.host == \"local\" ? `/comments/${id}` : '/comments/' + this.state.host + `/${id}`}\n                              className=\"btn btn-primary stretched-link\"\n                            >\n                              View Comments ({data.children.length})\n                          </Link>\n                          </Card.Body>\n                        </Card>\n                      ) : null);\n                  })\n                ) : (\n                    <h3>Loading Posts...</h3>\n                  )}\n                {!isLoading && posts.length === 0 ? <h4>There's no posts yet :-(</h4> : null}\n              </Card.Body>\n            </Card>\n          </Col>\n          \n          <Col>\n            <Sidebar currentCommunity={currentCommunity}\n              changeCommunity={(community) => this.setState({\n                currentCommunity: community,\n                isLoading: true\n              })} />\n          </Col>\n            </Row>*/}\n      </Container>\n    );\n  }\n}\n\nexport default CommunityFeed;","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/CommunityList.jsx",["171","172","173"],"import React from \"react\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport { Link } from \"react-router-dom\";\n\nclass CommunityList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            communities: [],\n            isLoading: true,\n        }\n    }\n\n    componentDidMount() {\n        this.fetchCommunities();\n    }\n\n    fetchCommunities() {\n        fetch('/api/communities' + (this.props.instance !== \"local\" ? \"?external=\" + this.props.instance : \"\"))\n            .then(response => response.json())\n            .then(data =>\n                this.setState({\n                    communities: data,\n                    isLoading: false,\n                })\n            )\n    }\n\n    render() {\n        const { communities, isLoading } = this.state;\n        return (\n            <Accordion defaultActiveKey=\"0\">\n                <Card className=\"mt-4\">\n                    <Accordion.Toggle as={Card.Header} eventKey=\"0\" className=\"pt-4\">\n                        <h5>Hosted {this.props.instance === \"local\" ? \"locally:\" : \"on '\" + this.props.instance + \"':\"}\n                        </h5>\n                    </Accordion.Toggle>\n\n                    <Accordion.Collapse eventKey=\"0\">\n                        <Card.Body className=\"px-0 py-1\">\n                            <ListGroup variant=\"flush\">\n                                {!isLoading ?\n                                    communities.map((community) =>\n                                        community !== \"\" &&\n                                        \n                                            <ListGroup.Item key={community}>\n                                                <Link to={this.props.instance === \"local\" ? \n                                                \"communities/\" + community : \"communities/\" + this.props.instance + \"/\" + community} >\n                                                {community}\n                                                </Link>\n                                            </ListGroup.Item>)\n                                    : <ListGroup.Item>Loading Communities...</ListGroup.Item>\n                                }\n                            </ListGroup>\n                        </Card.Body>\n                    </Accordion.Collapse>\n\n                </Card>\n            </Accordion>\n        )\n    }\n}\n\nexport default CommunityList;","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/AccessForbidden.jsx",[],"/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/CommunityManager.jsx",["174","175","176"],"import React from 'react';\nimport UserRolesTable from './UserRolesTable'\nimport Form from 'react-bootstrap/Form';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport { authFetch } from '../auth';\nimport { Redirect } from 'react-router-dom';\nimport { Typeahead, Menu, MenuItem } from 'react-bootstrap-typeahead';\nimport { InputGroup, Col } from 'react-bootstrap';\nimport { PlusCircle } from 'react-bootstrap-icons';\n\nclass CommunityManager extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isAdmin: null,\n            currentCommunity: this.props.match.params.id,\n            users: [],\n            host: \"local\",\n            serverDropdown: \"Select Server\",\n            selected: [{\n                user: \"\"\n            }],\n            instances: [],\n            roles: [\"admin\", \"contributor\", \"member\", \"guest\", \"prohibited\"],\n            role: \"\",\n            defaultRole: \"\",\n            currentDefaultRole: \"\",\n            tableUpdate: \"\",\n            errors: [],\n        };\n    }\n\n    componentDidMount() {\n        this.fetchUserDetails();\n        this.fetchInstances();\n        this.fetchUsers(this.state.host)\n        this.fetchDefaultRole();\n    }\n\n    validateUserRolesForm() {\n        const errors = [];\n        if (this.state.selected[0].user.length === 0 || this.state.role.length === 0) {\n            errors.push(\"Required fields have been left blank.\");\n            return errors;\n        }\n        return errors;\n    }\n\n    validateDefaultRoleForm() {\n        const errors = [];\n        if (this.state.defaultRole.length === 0) {\n            errors.push(\"Required fields have been left blank.\");\n            return errors;\n        }\n        return errors;\n    }\n\n    fetchUserDetails() {\n        authFetch(\"/api/get-user\").then(response => response.json())\n            .then(data =>\n                this.setState({\n                    isAdmin: data.adminOf.includes(this.state.currentCommunity),\n                })\n            )\n    }\n\n    fetchDefaultRole() {\n        authFetch(\"/api/get-default-role/\" + this.state.currentCommunity).then(response => response.json())\n            .then(data =>\n                this.setState({\n                    currentDefaultRole: data.default_role\n                }))\n\n    }\n\n    async fetchInstances() {\n        await fetch(\"/api/get-instances\")\n            .then(response => response.json())\n            .then(data =>\n                this.setState({\n                    instances: [\"local\", ...data],\n                })\n            )\n        // this.state.instances.map(host => (this.fetchCommunities(host)));\n    }\n\n    //currently fetches user list for specified host every time a host is selected\n    //TO-DO: Add local storage/caching of users \n    async fetchUsers(host) {\n        await fetch('/api/users' + (host !== \"local\" ? \"?external=\" + host : \"\")).then(response => response.json())\n            .then(data =>\n                this.setState({\n                    users: [...data.map(user => ({ host: host, user: user }))],\n                }))\n    }\n\n    handleHostChange(name) {\n        this.setState({ host: name })\n        this.setState({ serverDropdown: name })\n        this.fetchUsers(name);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        const errors = this.validateUserRolesForm();\n        if (errors.length > 0) {\n            this.setState({ errors });\n            return;\n        }\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(\n                {\n                    host: this.state.host,\n                    user: this.state.selected[0].user,\n                    community: this.state.currentCommunity,\n                    role: this.state.role,\n                }\n            )\n        };\n\n        fetch('/api/assign-role', requestOptions);\n        this.setState(\n            { host: \"local\", serverDropdown: \"Select Server\", role: \"\", selected: [{ user: \"\" }] }\n        );\n    }\n\n    handleDefRoleSubmit(event) {\n        event.preventDefault();\n        const errors = this.validateDefaultRoleForm();\n        if (errors.length > 0) {\n            this.setState({ errors });\n            return;\n        }\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(\n                {\n                    role: this.state.defaultRole,\n                    community: this.state.currentCommunity,\n                }\n            )\n        };\n        fetch('/api/set-default-role', requestOptions);\n        this.setState(\n            { defaultRole: \"\" }\n        );\n        this.fetchDefaultRole();\n    }\n\n    render() {\n        return (\n            this.state.isAdmin == null ? <h3> Loading... </h3> :\n                !this.state.isAdmin ? <Redirect to='/forbidden' /> :\n                    <Card className=\"mt-4\">\n                        <Card.Header className=\"pt-4\">\n                            <Card.Title>Manage your community: {this.state.currentCommunity}</Card.Title>\n                        </Card.Header>\n                        <Card.Body>\n                            <Card className=\"mt-4\">\n                                <Card.Body>\n                                    <Card.Title>Assign User Role</Card.Title>\n                                    <Form onSubmit={this.handleSubmit.bind(this)}>\n                                        {/* <Form.Label>Assign User Role</Form.Label> */}\n                                        <Form.Row>\n                                            <Form.Group as={Col} xs={12} sm={12} md={12} lg={6}>\n                                                <InputGroup>\n                                                    <DropdownButton\n                                                        variant=\"outline-secondary\"\n                                                        title={this.state.serverDropdown}\n                                                        as={InputGroup.Prepend}>\n\n                                                        {this.state.instances.map(name => {\n                                                            return <Dropdown.Item key={name} onClick={() => this.handleHostChange(name)}>{name}</Dropdown.Item>\n                                                        })\n                                                        }\n                                                    </DropdownButton>\n                                                    <Typeahead\n                                                        labelKey={option => `${option.user}`}\n                                                        id=\"user-choice\"\n                                                        renderMenu={(results, menuProps) => (\n                                                            <Menu {...menuProps} maxHeight=\"500%\">\n                                                                {results.map((result, index) => (\n                                                                    <MenuItem option={result} position={index} key={index}>\n                                                                        {/* <small className=\"text-muted\">{result.host + \":  \"}</small> */}\n                                                                        {result.user}\n\n                                                                    </MenuItem>\n                                                                ))}\n                                                            </Menu>\n                                                        )}\n\n                                                        onChange={(selected) => {\n                                                            this.setState({ selected: selected })\n                                                        }}\n\n                                                        options={this.state.users}\n                                                        selected={this.state.selected}\n                                                    />\n                                                </InputGroup>\n                                            </Form.Group>\n                                            <Form.Group as={Col} xs={12} sm={6} md={7} lg={4}>\n                                                <DropdownButton\n                                                    variant=\"outline-secondary\"\n                                                    title={(this.state.role == \"\" ? \"Select Role\" : this.state.role)}>\n                                                    {this.state.roles.map(role => {\n                                                        return <Dropdown.Item key={role} onClick={() => this.setState({ role: role })}>{role}</Dropdown.Item>\n                                                    })\n                                                    }\n                                                </DropdownButton>\n                                            </Form.Group>\n                                            <Form.Group as={Col} xs={12} sm={6} md={5} lg={2}>\n                                                <Button type=\"submit\"><PlusCircle className=\"mb-1\" /> Assign</Button>\n                                            </Form.Group>\n                                        </Form.Row>\n                                    </Form>\n                                </Card.Body>\n                            </Card>\n                            <Card className=\"mt-4\">\n                                <Card.Body>\n                                    <Card.Title>Set Default Role</Card.Title>\n                                    <Form onSubmit={this.handleDefRoleSubmit.bind(this)}>\n                                        <Form.Row>\n                                            <Form.Group as={Col} xs={12} sm={4}>\n                                                <DropdownButton\n                                                    variant=\"outline-secondary\"\n                                                    title={(this.state.defaultRole == \"\" ? \"Select Role\" : this.state.defaultRole)}\n                                                >\n                                                    {this.state.roles.map(role => {\n                                                        return <Dropdown.Item key={role} onClick={() => this.setState({ defaultRole: role })}>{(role === this.state.currentDefaultRole ? \"current default: \" + role : role)}</Dropdown.Item>\n                                                    })\n                                                    }\n                                                </DropdownButton>\n                                            </Form.Group>\n                                            <Form.Group as={Col} xs={10} sm={8}>\n                                                <Button type=\"submit\">Set default role</Button>\n                                            </Form.Group>\n                                        </Form.Row>\n                                    </Form>\n                                </Card.Body>\n                            </Card>\n                            <Card className=\"mt-4\">\n                                <Card.Body>\n                                    <Card.Title>Users Assigned Roles</Card.Title>\n                                    <UserRolesTable community_id={this.state.currentCommunity} tableUpdate={this.state.tableUpdate} />\n                                </Card.Body>\n                            </Card>\n                        </Card.Body>\n                    </Card >\n        )\n    }\n}\n\nexport default CommunityManager;","/home/rhona/Documents/Junior_Honours/CS3099/project-code/client/src/components/UserRolesTable.jsx",["177"],"import React, { Component } from 'react';\nimport Table from 'react-bootstrap/Table';\n\nclass UserRolesTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            adminUsers: [],\n            contributorUsers: [],\n            memberUsers: [],\n            guestUsers: [],\n            prohibitedUsers: [],\n        }\n    }\n\n    componentDidMount() {\n        this.fetchUserRoles();\n    }\n\n\n    async fetchUserRoles() {\n        await fetch(\"/api/get-community-roles/\" + this.props.community_id)\n            .then(response => response.json())\n            .then(data =>\n                this.setState({\n                    adminUsers: data.admins,\n                    contributorUsers: data.contributors,\n                    memberUsers: data.members,\n                    guestUsers: data.guests,\n                    prohibitedUsers: data.prohibited,\n                })\n            )\n    }\n\n    render() {\n        return (\n            <Table bordered hover>\n                <thead>\n                    <tr>\n                        <th>Username</th>\n                        <th>Role</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.state.adminUsers.map(admin => {\n                        return (\n                            <tr>\n                                <td>{admin}</td>\n                                <td>Admin</td>\n                            </tr>\n                        )\n                    })}\n                    {this.state.contributorUsers.map(contributor => {\n                        return (\n                            <tr>\n                                <td>{contributor}</td>\n                                <td>Contributor</td>\n                            </tr>\n                        )\n                    })}\n                    {this.state.memberUsers.map(member => {\n                        return (\n                            <tr>\n                                <td>{member}</td>\n                                <td>Member</td>\n                            </tr>\n                        )\n                    })}\n                    {this.state.guestUsers.map(guest => {\n                        return (\n                            <tr>\n                                <td>{guest}</td>\n                                <td>Guest</td>\n                            </tr>\n                        )\n                    })}\n                    {this.state.prohibitedUsers.map(prohibited => {\n                        return (\n                            <tr style={{ \"color\": \"red\" }}>\n                                <td>{prohibited}</td>\n                                <td>Prohibited</td>\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </Table >\n        )\n    }\n}\nexport default UserRolesTable;",{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","severity":1,"message":"183","line":97,"column":22,"nodeType":"184","messageId":"185","endLine":97,"endColumn":24},{"ruleId":"186","severity":1,"message":"187","line":1,"column":17,"nodeType":"188","messageId":"189","endLine":1,"endColumn":26},{"ruleId":"186","severity":1,"message":"190","line":6,"column":8,"nodeType":"188","messageId":"189","endLine":6,"endColumn":16},{"ruleId":"186","severity":1,"message":"191","line":9,"column":8,"nodeType":"188","messageId":"189","endLine":9,"endColumn":22},{"ruleId":"186","severity":1,"message":"192","line":30,"column":10,"nodeType":"188","messageId":"189","endLine":30,"endColumn":19},{"ruleId":"186","severity":1,"message":"193","line":34,"column":9,"nodeType":"188","messageId":"189","endLine":34,"endColumn":16},{"ruleId":"194","severity":1,"message":"195","line":50,"column":6,"nodeType":"196","endLine":50,"endColumn":8,"suggestions":"197"},{"ruleId":"186","severity":1,"message":"198","line":3,"column":55,"nodeType":"188","messageId":"189","endLine":3,"endColumn":58},{"ruleId":"186","severity":1,"message":"199","line":3,"column":60,"nodeType":"188","messageId":"189","endLine":3,"endColumn":69},{"ruleId":"182","severity":1,"message":"200","line":93,"column":47,"nodeType":"184","messageId":"185","endLine":93,"endColumn":49},{"ruleId":"186","severity":1,"message":"201","line":5,"column":8,"nodeType":"188","messageId":"189","endLine":5,"endColumn":12},{"ruleId":"186","severity":1,"message":"202","line":6,"column":8,"nodeType":"188","messageId":"189","endLine":6,"endColumn":14},{"ruleId":"203","severity":1,"message":"204","line":60,"column":7,"nodeType":"205","endLine":60,"endColumn":17},{"ruleId":"203","severity":1,"message":"204","line":61,"column":7,"nodeType":"205","endLine":61,"endColumn":17},{"ruleId":"206","severity":1,"message":"207","line":93,"column":13,"nodeType":"208","endLine":99,"endColumn":15},{"ruleId":"186","severity":1,"message":"209","line":4,"column":10,"nodeType":"188","messageId":"189","endLine":4,"endColumn":15},{"ruleId":"210","severity":1,"message":"211","line":39,"column":80,"nodeType":"212","messageId":"213","endLine":39,"endColumn":81,"suggestions":"214"},{"ruleId":"210","severity":1,"message":"215","line":39,"column":83,"nodeType":"212","messageId":"213","endLine":39,"endColumn":84,"suggestions":"216"},{"ruleId":"210","severity":1,"message":"217","line":39,"column":86,"nodeType":"212","messageId":"213","endLine":39,"endColumn":87,"suggestions":"218"},{"ruleId":"186","severity":1,"message":"219","line":2,"column":21,"nodeType":"188","messageId":"189","endLine":2,"endColumn":24},{"ruleId":"210","severity":1,"message":"220","line":31,"column":57,"nodeType":"212","messageId":"213","endLine":31,"endColumn":58,"suggestions":"221"},{"ruleId":"210","severity":1,"message":"220","line":31,"column":110,"nodeType":"212","messageId":"213","endLine":31,"endColumn":111,"suggestions":"222"},{"ruleId":"182","severity":1,"message":"200","line":45,"column":23,"nodeType":"184","messageId":"185","endLine":45,"endColumn":25},{"ruleId":"182","severity":1,"message":"200","line":41,"column":59,"nodeType":"184","messageId":"185","endLine":41,"endColumn":61},{"ruleId":"186","severity":1,"message":"223","line":4,"column":10,"nodeType":"188","messageId":"189","endLine":4,"endColumn":14},{"ruleId":"186","severity":1,"message":"224","line":1,"column":28,"nodeType":"188","messageId":"189","endLine":1,"endColumn":38},{"ruleId":"186","severity":1,"message":"225","line":2,"column":8,"nodeType":"188","messageId":"189","endLine":2,"endColumn":12},{"ruleId":"186","severity":1,"message":"226","line":3,"column":8,"nodeType":"188","messageId":"189","endLine":3,"endColumn":15},{"ruleId":"186","severity":1,"message":"198","line":4,"column":27,"nodeType":"188","messageId":"189","endLine":4,"endColumn":30},{"ruleId":"186","severity":1,"message":"219","line":4,"column":32,"nodeType":"188","messageId":"189","endLine":4,"endColumn":35},{"ruleId":"186","severity":1,"message":"201","line":4,"column":37,"nodeType":"188","messageId":"189","endLine":4,"endColumn":41},{"ruleId":"186","severity":1,"message":"227","line":4,"column":43,"nodeType":"188","messageId":"189","endLine":4,"endColumn":54},{"ruleId":"186","severity":1,"message":"202","line":4,"column":56,"nodeType":"188","messageId":"189","endLine":4,"endColumn":62},{"ruleId":"186","severity":1,"message":"228","line":4,"column":64,"nodeType":"188","messageId":"189","endLine":4,"endColumn":69},{"ruleId":"186","severity":1,"message":"229","line":7,"column":10,"nodeType":"188","messageId":"189","endLine":7,"endColumn":20},{"ruleId":"186","severity":1,"message":"230","line":72,"column":13,"nodeType":"188","messageId":"189","endLine":72,"endColumn":22},{"ruleId":"186","severity":1,"message":"231","line":72,"column":24,"nodeType":"188","messageId":"189","endLine":72,"endColumn":29},{"ruleId":"186","severity":1,"message":"232","line":72,"column":31,"nodeType":"188","messageId":"189","endLine":72,"endColumn":36},{"ruleId":"186","severity":1,"message":"233","line":72,"column":56,"nodeType":"188","messageId":"189","endLine":72,"endColumn":67},{"ruleId":"186","severity":1,"message":"234","line":9,"column":5,"nodeType":"188","messageId":"189","endLine":9,"endColumn":16},{"ruleId":"186","severity":1,"message":"235","line":10,"column":5,"nodeType":"188","messageId":"189","endLine":10,"endColumn":18},{"ruleId":"182","severity":1,"message":"183","line":53,"column":51,"nodeType":"184","messageId":"185","endLine":53,"endColumn":53},{"ruleId":"182","severity":1,"message":"200","line":160,"column":32,"nodeType":"184","messageId":"185","endLine":160,"endColumn":34},{"ruleId":"182","severity":1,"message":"200","line":255,"column":77,"nodeType":"184","messageId":"185","endLine":255,"endColumn":79},{"ruleId":"182","severity":1,"message":"200","line":277,"column":84,"nodeType":"184","messageId":"185","endLine":277,"endColumn":86},{"ruleId":"236","severity":1,"message":"237","line":5,"column":5,"nodeType":"238","messageId":"239","endLine":7,"endColumn":6},"no-native-reassign",["240"],"no-negated-in-lhs",["241"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Dropdown' is defined but never used.","'defaultProfile' is defined but never used.","'instances' is assigned a value but never used.","'context' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'logged'. Either include it or remove the dependency array.","ArrayExpression",["242"],"'Row' is defined but never used.","'CardGroup' is defined but never used.","Expected '===' and instead saw '=='.","'Form' is defined but never used.","'Button' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'Route' is defined but never used.","no-useless-escape","Unnecessary escape character: \\$.","Literal","unnecessaryEscape",["243","244"],"Unnecessary escape character: \\^.",["245","246"],"Unnecessary escape character: \\*.",["247","248"],"'Col' is defined but never used.","Unnecessary escape character: \\+.",["249","250"],["251","252"],"'Link' is defined but never used.","'useContext' is defined but never used.","'Post' is defined but never used.","'Sidebar' is defined but never used.","'FormControl' is defined but never used.","'Alert' is defined but never used.","'PlusCircle' is defined but never used.","'isLoading' is assigned a value but never used.","'posts' is assigned a value but never used.","'error' is assigned a value but never used.","'newPostText' is assigned a value but never used.","'CaretUpFill' is defined but never used.","'CaretDownFill' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation",{"desc":"253","fix":"254"},{"messageId":"255","fix":"256","desc":"257"},{"messageId":"258","fix":"259","desc":"260"},{"messageId":"255","fix":"261","desc":"257"},{"messageId":"258","fix":"262","desc":"260"},{"messageId":"255","fix":"263","desc":"257"},{"messageId":"258","fix":"264","desc":"260"},{"messageId":"255","fix":"265","desc":"257"},{"messageId":"258","fix":"266","desc":"260"},{"messageId":"255","fix":"267","desc":"257"},{"messageId":"258","fix":"268","desc":"260"},"Update the dependencies array to be: [logged]",{"range":"269","text":"270"},"removeEscape",{"range":"271","text":"272"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"273","text":"274"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"275","text":"272"},{"range":"276","text":"274"},{"range":"277","text":"272"},{"range":"278","text":"274"},{"range":"279","text":"272"},{"range":"280","text":"274"},{"range":"281","text":"272"},{"range":"282","text":"274"},[1456,1458],"[logged]",[1162,1163],"",[1162,1162],"\\",[1165,1166],[1165,1165],[1168,1169],[1168,1168],[1083,1084],[1083,1083],[1136,1137],[1136,1136]]